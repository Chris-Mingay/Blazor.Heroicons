@inherits HeroiconBase

<DynamicComponent Type="_razorComponentType" Parameters="_attributes"></DynamicComponent>

@code {
    [Parameter]
    public string Name { get; set; } = "SparklesIcon";
    [Parameter]
    public HeroiconType Type { get; set; } = HeroiconType.Outline;
    private HeroiconType _heroiconType;
    private Type _razorComponentType = typeof(Solid.SparklesIcon);
    private Dictionary<string, object> _attributes => new()
    {
        { "AdditionalAttributes", AdditionalAttributes }
    };

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        //remove hyphens and spaces
        var name = Name.Replace("-", "").Replace(" ", "");
        //add icon suffix, if not included
        if (!name.ToLower().EndsWith("icon"))
        {
            name = $"{name}Icon";
        }

        //check to see if the icon parameters have changed
        if (_razorComponentType is null ||
        _razorComponentType.Name.ToLower() != name.ToLower() ||
        _heroiconType != Type)
        {
            //find icon based on name and type
            _razorComponentType = System.Type.GetType($"Blazor.Heroicons.{Type}.{name}", false, true)!;
            _heroiconType = Type;
        }

        if (_razorComponentType is null)
            throw new Exception($"Heroicon '{Type}.{name}' not found");
    }

}